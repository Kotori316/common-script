name: 'Release Prod Gradle'
on:
  workflow_call:
    inputs:
      sign_check_command:
        type: string
        required: false
        default: ''
      release_command:
        type: string
        required: true
      enable_signature_check:
        type: boolean
        default: false
      use_gradle_cache:
        type: boolean
        default: false
      java_version:
        type: string
        default: '17'
    secrets:
      GCP_IDENTITY_PROVIDER:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true
      GCP_VERSION_FUNCTION_ENDPOINT:
        required: true
      GCP_FUNCTION_EXECUTION_ACCOUNT:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{inputs.java_version}}
      - uses: gradle/gradle-build-action@v3
        with:
          cache-disabled: ${{!inputs.use_gradle_cache}}
          cache-read-only: true
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{secrets.GCP_IDENTITY_PROVIDER}}
          service_account: ${{secrets.GCP_SERVICE_ACCOUNT}}
      - name: Download Private Key
        run: gcloud storage cp gs://kotori316-resources/secring.gpg "${HOME}/secring.gpg"
      - name: Download JKS
        run: gcloud storage cp gs://kotori316-resources/kotori316_keystore.jks "${HOME}/kotori316_keystore.jks"
      - name: Download Public Key
        run: |
          gcloud storage cp gs://kotori316-resources/pgp_public.pub "${HOME}/pgp_public.pub"
          gpg --import "${HOME}/pgp_public.pub"
      - name: Get credentials
        id: get-secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |-
            key_id:kotori316-mods-resources/signing-key-id
            key_password:kotori316-mods-resources/signing-password
            jar_password:kotori316-mods-resources/jar-sign-key-password
            modrinth_token:kotori316-mods-resources/modrinth_token
            curseforge_token:kotori316-mods-resources/curseforge_token
            azure_token:kotori316-mods-resources/azure_token
            cloudflare_s3_endpoint:kotori316-mods-resources/cloudflare_s3_endpoint
            cloudflare_access_key:kotori316-mods-resources/cloudflare_access_key
            cloudflare_secret_key:kotori316-mods-resources/cloudflare_secret_key
      - run: chmod +x ./gradlew
      - name: Check build with sign arguments
        if: inputs.sign_check_command != ''
        run: >-
          ./gradlew
          -Psigning.secretKeyRingFile="${HOME}/secring.gpg"
          -Psigning.password="${KEY_PASSWORD}"
          -Psigning.keyId="${KEY_ID}"
          -PjarSign.keyLocation="${HOME}/kotori316_keystore.jks"
          -PjarSign.keyAlias="ko316"
          -PjarSign.storePass="${JAR_PASSWORD}"
          ${{inputs.sign_check_command}}
        env:
          KEY_PASSWORD: ${{steps.get-secrets.outputs.key_password}}
          KEY_ID: ${{steps.get-secrets.outputs.key_id}}
          JAR_PASSWORD: ${{steps.get-secrets.outputs.jar_password}}
      - name: Verify
        if: inputs.sign_check_command != '' && inputs.enable_signature_check
        run: |
          for f in $(find ./ -name "*.asc") ; do
            echo "::group::Build ${f:0:-4}"
            gpg --verify "$f" "${f:0:-4}"
            echo "::endgroup::"
          done
          for f in $(ls */build/libs/*.jar | grep -v -e "common" -e "deobf" -e "dev" -e "sources") ; do
            echo "::group::Jar sign ${f}"
            jarsigner -verify -keystore "${HOME}/kotori316_keystore.jks" "$f" -strict
            echo "::endgroup::"
          done
          for f in $(find ~/.m2 -name "*.asc") ; do
            echo "::group::${f:0:-4}"
            echo "${f:0:-4}"
            gpg --verify "$f" "${f:0:-4}"
            echo "::endgroup::"
          done
      - name: Release
        run: >-
          ./gradlew
          -Psigning.secretKeyRingFile="${HOME}/secring.gpg"
          -Psigning.password="${KEY_PASSWORD}"
          -Psigning.keyId="${KEY_ID}"
          -PjarSign.keyLocation="${HOME}/kotori316_keystore.jks"
          -PjarSign.keyAlias="ko316"
          -PjarSign.storePass="${JAR_PASSWORD}"
          -Dorg.gradle.s3.endpoint="${CLOUDFLARE_S3_ENDPOINT}"
          ${{inputs.release_command}}
        env:
          RELEASE_DEBUG: false
          REPO_TOKEN: ${{secrets.GITHUB_TOKEN}}
          AZURE_TOKEN: ${{steps.get-secrets.outputs.azure_token}}
          KEY_PASSWORD: ${{steps.get-secrets.outputs.key_password}}
          KEY_ID: ${{steps.get-secrets.outputs.key_id}}
          JAR_PASSWORD: ${{steps.get-secrets.outputs.jar_password}}
          CURSE_TOKEN: ${{steps.get-secrets.outputs.curseforge_token}}
          MODRINTH_TOKEN: ${{steps.get-secrets.outputs.modrinth_token}}
          CLOUDFLARE_S3_ENDPOINT: ${{steps.get-secrets.outputs.cloudflare_s3_endpoint}}
          R2_ACCESS_KEY: ${{steps.get-secrets.outputs.cloudflare_access_key}}
          R2_SECRET_KEY: ${{steps.get-secrets.outputs.cloudflare_secret_key}}
          VERSION_FUNCTION_ENDPOINT: ${{ secrets.GCP_VERSION_FUNCTION_ENDPOINT }}
          SERVICE_ACCOUNT: ${{ secrets.GCP_FUNCTION_EXECUTION_ACCOUNT }}
      - name: Verify Build Files
        if: inputs.enable_signature_check
        run: |
          for f in $(find ./ -name "*.asc") ; do
            echo "::group::${f:0:-4}"
            gpg --verify "$f" "${f:0:-4}"
            echo "::endgroup::"
          done
      - name: Verify Main Jar
        if: inputs.enable_signature_check
        run: |
          for f in $(ls */build/libs/*.jar | grep -v -e "common" -e "deobf" -e "dev" -e "sources") ; do
          echo "::group::Jar sign ${f}"
          jarsigner -verify -keystore "${HOME}/kotori316_keystore.jks" "$f" -strict
          echo "::endgroup::"
          done
      - name: Verify Maven Local
        if: inputs.enable_signature_check
        run: |
          for f in $(find ~/.m2 -name "*.asc") ; do
            echo "::group::${f:0:-4}"
            gpg --verify "$f" "${f:0:-4}"
            echo "::endgroup::"
          done
      - name: Get repository name
        if: always()
        id: repo-name
        run:
          echo "repo-name=$(basename "$REPO")" >> $GITHUB_OUTPUT
        env:
          REPO: ${{ github.repository }}
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.repo-name.outputs.repo-name }}-Release-${{ github.run_number }}
          retention-days: 7
          path: |
            **/build/*libs/
      - name: Upload maven
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.repo-name.outputs.repo-name }}-Maven-${{ github.run_number }}
          retention-days: 1
          path: ~/.m2
